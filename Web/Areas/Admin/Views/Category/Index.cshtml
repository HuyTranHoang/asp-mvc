@model IEnumerable<Category>

@{
    ViewData["Title"] = "Category";

    var successMessage = TempData["SuccessMessage"];
}

<section class="bg-body-tertiary mt-4 pb-3 rounded-bottom shadow-lg">
    <h1 class="bg-body-secondary bg-gradient px-3 py-4 rounded-top text-center">Category List</h1>
    <div class="d-flex justify-content-between px-4 py-2">
        <div class="align-items-center d-flex position-relative">
            <input class="form-control" id="search" name="search" placeholder="Search..." style="padding-right: 35px" type="text">
            <button class="btn end-0 position-absolute top-0" id="clearButton" style="display: none">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <a asp-action="Upsert" class="btn btn-primary text-decoration-none text-white">
            <i class="fa-plus fa-regular"></i> Create new category
        </a>
    </div>

    <div class="p-4">
        <table id="tblCategory" class="table table-bordered table-striped" style="width: 100%">
            <thead>
            <tr class="table-primary">
                <th scope="col">#</th>
                <th scope="col">
                    Name
                </th>
                <th scope="col">
                    Display Order
                </th>
                <th scope="col">
                    Created At
                </th>
                <th scope="col" style="width: 20%">
                    Actions
                </th>
            </tr>
            </thead>
        </table>
    </div>
</section>


@section Scripts {
    <partial model="successMessage" name="_NotificationScriptsPartial" />

    <script >
          $(function() {
            const table = $('#tblCategory')
            const dataTable = loadDataTable(table)
            handleDeleteButton(table, dataTable)
            handleSearchBox(dataTable)
          })


          function loadDataTable(table) {
            return table.DataTable({
                  columnDefs: [
                      {orderable: false, targets: 4}
                  ],
                  ajax: {url: "/admin/category/getall"},
                  columns: [
                      {
                          "render": function (data, type, full, meta) {
                              return meta.row + 1;
                          }
                      },
                      {data: "name",},
                      {data: "displayOrder"},
                      {
                          data: "createdAt",
                          "render": function (data) {
                              return moment(data).format('YYYY-MM-DD HH:mm:ss');
                          }
                      },
                      {
                          data: "id",
                          "render": function (data) {
                              return `<div class="d-flex">
                                    <a href="/admin/category/upsert?id=${data}" class="btn btn-secondary fw-semibold me-3 px-4 text-white">
                                        <i class="fa-pen-to-square fa-regular"></i> Edit
                                    </a>

                                    <button class="btn btn-danger delete-button fw-semibold px-4" data-id="${data}">
                                        <i class="fa-regular fa-trash"></i> Delete
                                    </button>
                                  </div>`
                          }
                      },
                  ]
              })
          }

          function handleDeleteButton(table, dataTable) {
              table.on( "click", ".delete-button", async function() {
                  const itemId = $(this).data('id')
                  const url = `/Admin/Category/Delete/${itemId}`

                  const result = await Swal.fire({
                    title: 'Are you sure?',
                    text: "You won't be able to revert this!",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes, delete it!'
                  })

                  if (result && result.isConfirmed) {
                     $.ajax({
                          url: url,
                          type: "DELETE",
                          success: function (data) {
                              dataTable.ajax.reload()
                              Swal.fire({
                                icon: 'success',
                                title: 'Successfully!',
                                text: data.message,
                                timer: 1500
                              })
                          }
                      })
                  }
              });
          }

          function handleSearchBox(dataTable) {
              //Enable search box outside
              const searchInput = $("#search")
              const clearSearchButton = $("#clearButton")
              searchInput.keyup(function () {
                  dataTable.search($(this).val()).draw()
                  if (searchInput.val().length > 0) {
                      clearSearchButton.css("display", "block");
                  } else {
                      clearSearchButton.css("display", "none");
                  }
              })
              //Clear search button
              clearSearchButton.click(function () {
                  searchInput.val("")
                  clearSearchButton.css("display", "none");
                  dataTable.search($(this).val()).draw()
              })
          }
        </script>
}